/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package estructuraficherospracticas07a09;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import static java.nio.file.LinkOption.NOFOLLOW_LINKS;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author joheras
 */
public class EstructuraFicherosP07P09 extends javax.swing.JFrame {

    /**
     * Creates new form EstructuraFicherosP01P06
     */
    public EstructuraFicherosP07P09() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Estructura Ficheros"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder("Informaci√≥n"));
        jScrollPane1.setViewportView(jTextArea1);

        jTextField1.setEnabled(false);

        jButton1.setText("Selecciona Directorio");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Comprueba estructura");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTextField1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File(".")); // start at application current directory
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File yourFolder = fc.getSelectedFile();
            jTextField1.setText(yourFolder.getAbsolutePath());
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String path = jTextField1.getText();
        if (path.equals("")) {
            JOptionPane.showMessageDialog(this, "Selecciona un directorio primero", "Error", JOptionPane.ERROR_MESSAGE);

        } else {
            String errores = "";
            File folder = new File(path);

            String ficheros[] = {"/Practica07",
                "/Practica07/Parte01",
                "/Practica07/Parte01/C++",
                "/Practica07/Parte01/C++/Actividad.h",
                "/Practica07/Parte01/C++/Actividad.cpp",
                "/Practica07/Parte01/C++/Asignatura.h",
                "/Practica07/Parte01/C++/Asignatura.cpp",
                "/Practica07/Parte01/C++/Convalidacion.h",
                "/Practica07/Parte01/C++/Convalidacion.cpp",
                "/Practica07/Parte01/C++/Estudiante.h",
                "/Practica07/Parte01/C++/Estudiante.cpp",
                "/Practica07/Parte01/C++/Matricula.h",
                "/Practica07/Parte01/C++/Matricula.cpp",
                "/Practica07/Parte01/C++/Curso.h",
                "/Practica07/Parte01/C++/OrdenMatricula.h",
                "/Practica07/Parte01/C++/Principal_prac07_01.cpp",
                "/Practica07/Parte01/C++/Reconocimiento.h",
                "/Practica07/Parte01/C++/Reconocimiento.cpp",
                "/Practica07/Parte01/C++/Tipo.h",
                "/Practica07/Parte01/Java",
                "/Practica07/Parte01/Java/Actividad.java",
                "/Practica07/Parte01/Java/Asignatura.java",
                "/Practica07/Parte01/Java/Convalidacion.java",
                "/Practica07/Parte01/Java/Estudiante.java",
                "/Practica07/Parte01/Java/Matricula.java",
                "/Practica07/Parte01/Java/Curso.java",
                "/Practica07/Parte01/Java/OrdenMatricula.java",
                "/Practica07/Parte01/Java/Principal_prac07_01.java",
                "/Practica07/Parte01/Java/Reconocimiento.java",
                "/Practica07/Parte01/Java/Tipo.java",
                "/Practica07/Parte02",
                "/Practica07/Parte02/C++",
                "/Practica07/Parte02/C++/AbsList.h",
                "/Practica07/Parte02/C++/AbsList.cpp",
                "/Practica07/Parte02/C++/ArrList.h",
                "/Practica07/Parte02/C++/ArrList.cpp",
                "/Practica07/Parte02/C++/LinkList.h",
                "/Practica07/Parte02/C++/LinkList.cpp",
                "/Practica07/Parte02/C++/Node.h",
                "/Practica07/Parte02/C++/Node.cpp",
                "/Practica07/Parte02/C++/Principal_prac07_02.cpp",
                "/Practica07/Parte02/Java",
                "/Practica07/Parte02/Java/AbsList.java",
                "/Practica07/Parte02/Java/ArrList.java",
                "/Practica07/Parte02/Java/LinkList.java",
                "/Practica07/Parte02/Java/Node.java",
                "/Practica07/Parte02/Java/Principal_prac07_02.java",
                "/Practica08",
                "/Practica08/Parte01",
                "/Practica08/Parte01/C++",
                "/Practica08/Parte01/C++/Actividad.h",
                "/Practica08/Parte01/C++/Actividad.cpp",
                "/Practica08/Parte01/C++/Asignatura.h",
                "/Practica08/Parte01/C++/Asignatura.cpp",
                "/Practica08/Parte01/C++/Calificacion.h",
                "/Practica08/Parte01/C++/Calificacion.cpp",
                "/Practica08/Parte01/C++/Convalidacion.h",
                "/Practica08/Parte01/C++/Convalidacion.cpp",
                "/Practica08/Parte01/C++/Estudiante.h",
                "/Practica08/Parte01/C++/Estudiante.cpp",
                "/Practica08/Parte01/C++/Matricula.h",
                "/Practica08/Parte01/C++/Matricula.cpp",
                "/Practica08/Parte01/C++/Curso.h",
                "/Practica08/Parte01/C++/OrdenMatricula.h",
                "/Practica08/Parte01/C++/Principal_prac08_01.cpp",
                "/Practica08/Parte01/C++/Reconocimiento.h",
                "/Practica08/Parte01/C++/Reconocimiento.cpp",
                "/Practica08/Parte01/C++/Tipo.h",
                "/Practica08/Parte01/Java",
                "/Practica08/Parte01/Java/Actividad.java",
                "/Practica08/Parte01/Java/Asignatura.java",
                "/Practica08/Parte01/Java/Calificacion.java",
                "/Practica08/Parte01/Java/Convalidacion.java",
                "/Practica08/Parte01/Java/Estudiante.java",
                "/Practica08/Parte01/Java/Matricula.java",
                "/Practica08/Parte01/Java/Curso.java",
                "/Practica08/Parte01/Java/OrdenMatricula.java",
                "/Practica08/Parte01/Java/Reconocimiento.java",
                "/Practica08/Parte01/Java/Tipo.java",
                "/Practica08/Parte02",
                "/Practica08/Parte02/Java",
                "/Practica08/Parte02/Java/AbsList.java",
                "/Practica08/Parte02/Java/ArrList.java",
                "/Practica08/Parte02/Java/LinkList.java",
                "/Practica08/Parte02/Java/Node.java",
                "/Practica08/Parte02/Java/Principal_prac08_02.java",
                "/Practica08/Parte02/Java/Actividad.java",
                "/Practica08/Parte02/Java/Asignatura.java",
                "/Practica08/Parte02/Java/Calificacion.java",
                "/Practica08/Parte02/Java/Convalidacion.java",
                "/Practica08/Parte02/Java/Estudiante.java",
                "/Practica08/Parte02/Java/Matricula.java",
                "/Practica08/Parte02/Java/Curso.java",
                "/Practica08/Parte02/Java/OrdenMatricula.java",
                "/Practica08/Parte02/Java/Reconocimiento.java",
                "/Practica08/Parte02/Java/Tipo.java",
                "/Practica09",
                "/Practica09/Parte01",
                "/Practica09/Parte01/C++",
                "/Practica09/Parte01/C++/Parent.h",
                "/Practica09/Parte01/C++/Inode.h",
                "/Practica09/Parte01/C++/Name.h",
                "/Practica09/Parte01/C++/Permissions.h",
                "/Practica09/Parte01/C++/FSOperations.h",
                "/Practica09/Parte01/C++/FSObject.h",
                "/Practica09/Parte01/C++/FSObject.cpp",
                "/Practica09/Parte01/C++/InodeContainer.h",
                "/Practica09/Parte01/C++/InodeContainer.cpp",
                "/Practica09/Parte01/C++/Root.h",
                "/Practica09/Parte01/C++/Root.cpp",
                "/Practica09/Parte01/C++/Directory.h",
                "/Practica09/Parte01/C++/Directory.cpp",
                "/Practica09/Parte01/C++/File.h",
                "/Practica09/Parte01/C++/File.cpp",
                "/Practica09/Parte01/C++/TextFile.h",
                "/Practica09/Parte01/C++/TextFile.cpp",
                "/Practica09/Parte01/C++/BinaryFile.h",
                "/Practica09/Parte01/C++/BinaryFile.cpp",
                "/Practica09/Parte01/C++/Principal_prac09_01.cpp",
                "/Practica09/Parte01/Java",
                "/Practica09/Parte01/Java/Parent.java",
                "/Practica09/Parte01/Java/Inode.java",
                "/Practica09/Parte01/Java/Name.java",
                "/Practica09/Parte01/Java/Permissions.java",
                "/Practica09/Parte01/Java/FSOperations.java",
                "/Practica09/Parte01/Java/FSObject.java",
                "/Practica09/Parte01/Java/InodeContainer.java",
                "/Practica09/Parte01/Java/Root.java",
                "/Practica09/Parte01/Java/Directory.java",
                "/Practica09/Parte01/Java/File.java",
                "/Practica09/Parte01/Java/TextFile.java",
                "/Practica09/Parte01/Java/BinaryFile.java",
                "/Practica09/Parte01/Java/Principal_prac09_01.java"

            };

            String ficherosOpcionales[] = {"/Practica07/Parte01/C++/OrdenMatricula.cpp",
                "/Practica07/Parte01/C++/Tipo.cpp",
                "/Practica07/Parte01/C++/Curso.cpp",
                "/Practica08/Parte01/C++/OrdenMatricula.cpp",
                "/Practica08/Parte01/C++/Tipo.cpp",
                "/Practica08/Parte01/C++/Curso.cpp"
            };

            File f;
            for (int i = 0; i < ficheros.length; i++) {
                try {
                    f = new File(path + ficheros[i]);
                    Path path1 = Paths.get(path + ficheros[i]);

                    if (f.exists()) {
                        if (!f.getCanonicalFile().toPath().toRealPath(NOFOLLOW_LINKS).toString().equals(f.toString())) {
                            if ((path + ficheros[i]).contains(".")) {
                                errores = errores + "Falta el fichero " + ficheros[i] + "\n";
                            } else {
                                errores = errores + "Falta la carpeta " + ficheros[i] + "\n";
                            }
                        }

                    }
                    if (!f.exists()) {
                        if ((path + ficheros[i]).contains(".")) {
                            errores = errores + "Falta el fichero " + ficheros[i] + "\n";
                        } else {
                            errores = errores + "Falta la carpeta " + ficheros[i] + "\n";
                        }
                    }
                } catch (IOException ex) {
                    if ((path + ficheros[i]).contains(".")) {
                        errores = errores + "Falta el fichero " + ficheros[i] + "\n";
                    } else {
                        errores = errores + "Falta la carpeta " + ficheros[i] + "\n";
                    }
                }
            }

            if (errores.equals("")) {
                ArrayList<File> files = new ArrayList<>();
                for (int i = 0; i < ficheros.length; i++) {
                    files.add(new File(path + ficheros[i]));
                }

                for (int i = 0; i < ficherosOpcionales.length; i++) {
                    File optionalFile = new File(path + ficherosOpcionales[i]);
                    if (optionalFile.exists()) {
                        files.add(optionalFile);
                    }
                }

                writeZipFile(new File(path), files);
                jTextArea1.setText("La estructura de ficheros es correcta.\n"
                        + "Se ha creado un fichero zip con dichos ficheros.\n");
            } else {
                jTextArea1.setText(errores);
            }

        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void listFilesForFolder(final File folder) {
        for (final File fileEntry : folder.listFiles()) {
            if (fileEntry.isDirectory()) {
                listFilesForFolder(fileEntry);
            } else {
                System.out.println(fileEntry.getName());
            }
        }
    }

    public static void writeZipFile(File directoryToZip, ArrayList<File> fileList) {

        try {

            String path = directoryToZip.getAbsolutePath();
            path = path.substring(0, path.lastIndexOf("/") + 1);
            FileOutputStream fos = new FileOutputStream(path + directoryToZip.getName() + ".zip");
            ZipOutputStream zos = new ZipOutputStream(fos);

            for (File file : fileList) {
                if (!file.isDirectory()) {
                    addToZip(directoryToZip, file, zos);
                }
            }

            zos.close();
            fos.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void addToZip(File directoryToZip, File file, ZipOutputStream zos) throws FileNotFoundException,
            IOException {

        FileInputStream fis = new FileInputStream(file);

        // we want the zipEntry's path to be a relative path that is relative
        // to the directory being zipped, so chop off the rest of the path
        String zipFilePath = file.getCanonicalPath().substring(directoryToZip.getCanonicalPath().length() + 1,
                file.getCanonicalPath().length());
        System.out.println("Writing '" + zipFilePath + "' to zip file");
        ZipEntry zipEntry = new ZipEntry(zipFilePath);
        zos.putNextEntry(zipEntry);

        byte[] bytes = new byte[1024];
        int length;
        while ((length = fis.read(bytes)) >= 0) {
            zos.write(bytes, 0, length);
        }

        zos.closeEntry();
        fis.close();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EstructuraFicherosP07P09.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EstructuraFicherosP07P09.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EstructuraFicherosP07P09.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EstructuraFicherosP07P09.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EstructuraFicherosP07P09 Estructura = new EstructuraFicherosP07P09();
                Estructura.setVisible(true);
                Estructura.setExtendedState(Estructura.getExtendedState() | JFrame.MAXIMIZED_BOTH);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
